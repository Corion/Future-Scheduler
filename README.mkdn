
[![Build Status](https://travis-ci.org/Corion/Future-Scheduler.svg?branch=master)](https://github.com/Corion/Future-Scheduler)

# NAME

Future::Scheduler - provide helper functions for Future

# SYNOPSIS

    my $sched = Future::Scheduler->new();
    my $wakeup = $sched->sleep(5);
    $wakeup->then(...)->get;

This module is a wrapper around the various backends of Future providing
a common API for the simple scheduling mechanisms available from the IO loops.

## Supported event loops

Currently only [AnyEvent](https://metacpan.org/pod/AnyEvent), [Mojolicious](https://metacpan.org/pod/Mojolicious) and [IO::Async](https://metacpan.org/pod/IO::Async) are supported
in addition to a trivial, blocking default backend if none of the above event
loops can be detected.

# METHODS

## `Future::Scheduler->new()`

    my $ua = Future::Scheduler->new();

Creates a new instance of the scheduler abstraction.

## `$scheduler->sleep($seconds)`

    my $wakeup = $scheduler->sleep( 5 );
    $wakeup->then(sub {
        print "It's now 5 seconds later\n";
    });

Returns a future that will be fulfilled after `$seconds` seconds. Depending on
the backend features, subsecond resoultion might be available.

## `$scheduler->schedule()`

    $scheduler->schedule()->then(sub {
    });

Schedules a Future to be executed from the top level mainloop. This is usually
equivalent to `->sleep(0)`. This is convenient if you want to prevent the
call stack getting too deep, but makes it much harder to find where a Future
originated, due to losing the callstack.

See also [Tracing Methods in Future](https://metacpan.org/pod/Future#TRACING) for how to give your Futures names.

# VARIABLES

## `@Future::Scheduler::loops`

This is the list of adapter implementations for the various backends. If you
have another backend that is not yet supported by [Future::Scheduler](https://metacpan.org/pod/Future::Scheduler), you
can `unshift` it to the list yourself as a workaround.

The array holds the pairs of

    [ "loaded/module.pm" => 'Backend::Implementation::Class' ],

## `$Future::Scheduler::implementation`

Holds the base class that provides the current implementation. This is
initialized through

    $Future::Scheduler::implementation = Future::Scheduler->best_implementation()

If you really, really need to force a specific implementation rather than
letting the module autodetect it, you can set it yourself.

# SEE ALSO

[Future](https://metacpan.org/pod/Future)

# REPOSITORY

The public repository of this module is
[http://github.com/Corion/Future-Scheduler](http://github.com/Corion/Future-Scheduler).

# SUPPORT

The public support forum of this module is
[https://perlmonks.org/](https://perlmonks.org/).

# BUG TRACKER

Please report bugs in this module via the RT CPAN bug queue at
[https://rt.cpan.org/Public/Dist/Display.html?Name=Future-Scheduler](https://rt.cpan.org/Public/Dist/Display.html?Name=Future-Scheduler)
or via mail to [future-scheduler-Bugs@rt.cpan.org](https://metacpan.org/pod/future-scheduler-Bugs@rt.cpan.org).

# AUTHOR

Max Maischein `corion@cpan.org`

# COPYRIGHT (c)

Copyright 2018 by Max Maischein `corion@cpan.org`.

# LICENSE

This module is released under the same terms as Perl itself.
